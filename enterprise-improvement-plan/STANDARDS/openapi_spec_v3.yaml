openapi: 3.0.3
info:
  title: DocAIche API
  description: |
    **Enterprise-Grade AI-powered Documentation Search and Content Management System**
    
    ## Overview
    DocAIche provides intelligent documentation search, content enrichment, and comprehensive analytics
    for tracking user behavior and system performance. The API supports real-time search with caching,
    content ingestion from multiple sources, and AI-powered content enhancement.
    
    ## Security
    This API implements enterprise-grade security with JWT authentication, API key management,
    and comprehensive rate limiting. All endpoints require proper authentication unless otherwise noted.
    
    ## Key Features
    - **Intelligent Search**: AI-powered search with technology filtering and relevance scoring
    - **Content Management**: Ingest and manage documentation from various sources
    - **Analytics Dashboard**: Comprehensive metrics for search patterns, user behavior, and system performance
    - **AI Enrichment**: Automatic content enhancement using LLM providers
    - **Real-time Monitoring**: Live system health and performance metrics
    - **Enterprise Security**: JWT authentication, API keys, rate limiting, and audit logging
    
    ## Authentication
    
    ### JWT Bearer Token (Recommended)
    ```
    Authorization: Bearer <jwt_token>
    ```
    
    ### API Key Authentication
    ```
    X-API-Key: <api_key>
    ```
    
    ## Rate Limiting
    - **Search endpoints**: 30 requests/minute per user
    - **Admin endpoints**: 10 requests/minute per user
    - **Upload endpoints**: 5 requests/minute per user
    - **Health endpoints**: 120 requests/minute per user
    
    ## Error Handling
    All errors follow RFC 7807 Problem Details format with consistent structure:
    ```json
    {
      "error": {
        "code": "VALIDATION_ERROR",
        "message": "Invalid request parameters",
        "type": "ValidationError",
        "timestamp": "2025-01-05T12:00:00Z",
        "request_id": "req_123456",
        "path": "/api/v1/search"
      }
    }
    ```
    
  version: 3.0.0
  contact:
    name: DocAIche Support
    email: support@docaiche.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://app.docaiche.com/api/v1
    description: Production server
  - url: https://staging.docaiche.com/api/v1
    description: Staging server
  - url: http://localhost:4080/api/v1
    description: Development server (through admin-ui proxy)

tags:
  - name: authentication
    description: Authentication and authorization operations
  - name: search
    description: Search operations and feedback
  - name: health
    description: Health checks and system monitoring
  - name: analytics
    description: Analytics and metrics endpoints
  - name: config
    description: Configuration management
  - name: admin
    description: Administrative operations (requires admin role)
  - name: providers
    description: AI provider management
  - name: ingestion
    description: Document ingestion
  - name: enrichment
    description: AI-powered content enrichment

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags: [authentication]
      summary: Authenticate user
      description: |
        Authenticate user credentials and receive JWT tokens.
        
        **Response includes:**
        - Access token (15 minutes expiry)
        - Refresh token (7 days expiry)
        - User role and permissions
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [authentication]
      summary: Refresh access token
      description: |
        Use refresh token to obtain new access token.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [authentication]
      summary: Logout user
      description: |
        Invalidate current tokens and logout user.
      operationId: logoutUser
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/api-keys:
    get:
      tags: [authentication]
      summary: List API keys
      description: |
        List user's API keys with metadata.
        **Admin users can list all keys with user_id parameter.**
      operationId: listApiKeys
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          in: query
          description: Filter by user ID (admin only)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: API keys list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
    
    post:
      tags: [authentication]
      summary: Create API key
      description: |
        Generate new API key with specified scope and expiration.
      operationId: createApiKey
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'

  /auth/api-keys/{key_id}:
    delete:
      tags: [authentication]
      summary: Revoke API key
      description: |
        Revoke and invalidate an API key.
      operationId: revokeApiKey
      security:
        - JWTAuth: []
      parameters:
        - name: key_id
          in: path
          required: true
          schema:
            type: string
          example: "key_123456"
      responses:
        '200':
          description: API key revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "API key revoked successfully"

  # Health Check (No authentication required)
  /health:
    get:
      tags: [health]
      summary: System health check
      description: |
        Returns overall system health and individual component statuses.
        **This endpoint does not require authentication for monitoring purposes.**
      operationId: getHealth
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  # Protected endpoints require authentication
  /search:
    get:
      tags: [search]
      summary: Search documents (GET)
      description: |
        Simple GET endpoint for search queries.
        **Rate limited to 30 requests/minute per user.**
      operationId: searchDocumentsGet
      security:
        - JWTAuth: []
        - ApiKeyAuth: []
      parameters:
        - name: q
          in: query
          description: Search query string
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 500
          example: "react hooks"
        - name: technology_hint
          in: query
          description: Filter by technology
          required: false
          schema:
            type: string
          example: "react"
        - name: limit
          in: query
          description: Maximum results to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      tags: [search]
      summary: Search documents (POST)
      description: |
        Advanced search endpoint with full request body support.
        **Rate limited to 30 requests/minute per user.**
      operationId: searchDocumentsPost
      security:
        - JWTAuth: []
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users:
    get:
      tags: [admin]
      summary: List users
      description: |
        List all users in the system.
        **Requires admin role.**
      operationId: listUsers
      security:
        - JWTAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/audit-logs:
    get:
      tags: [admin]
      summary: Get audit logs
      description: |
        Retrieve system audit logs.
        **Requires admin role.**
      operationId: getAuditLogs
      security:
        - JWTAuth: []
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          schema:
            type: string
            format: date-time
        - name: event_type
          in: query
          schema:
            type: string
            enum: [auth, config, admin, data]
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT bearer token authentication.
        
        **To obtain a token:**
        1. POST /auth/login with credentials
        2. Use the returned access_token in Authorization header
        3. Refresh with /auth/refresh when token expires
        
        **Example:**
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key authentication for service-to-service communication.
        
        **To obtain an API key:**
        1. Authenticate with JWT
        2. POST /auth/api-keys to generate a key
        3. Use the key in X-API-Key header
        
        **Example:**
        ```
        X-API-Key: ak_live_1234567890abcdef
        ```

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
        password:
          type: string
          minLength: 8
          maxLength: 100
        remember_me:
          type: boolean
          default: false

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string

    AuthResponse:
      type: object
      required: [access_token, refresh_token, token_type, expires_in, user]
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
        token_type:
          type: string
          enum: [Bearer]
        expires_in:
          type: integer
          description: Access token expiry in seconds
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      required: [id, username, email, role, created_at]
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user, service, readonly]
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    CreateApiKeyRequest:
      type: object
      required: [name, scope]
      properties:
        name:
          type: string
          description: Human-readable name for the API key
          maxLength: 100
        scope:
          type: string
          enum: [read, write, admin]
          description: Access scope for the API key
        expires_in_days:
          type: integer
          minimum: 1
          maximum: 365
          default: 90
          description: Expiration in days

    ApiKeyResponse:
      type: object
      required: [key_id, api_key, name, scope, created_at, expires_at]
      properties:
        key_id:
          type: string
          description: Unique identifier for the key
        api_key:
          type: string
          description: The actual API key (only shown once)
        name:
          type: string
        scope:
          type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time

    ApiKeysResponse:
      type: object
      required: [keys]
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              key_id:
                type: string
              name:
                type: string
              scope:
                type: string
              created_at:
                type: string
                format: date-time
              expires_at:
                type: string
                format: date-time
              last_used:
                type: string
                format: date-time

    UsersResponse:
      type: object
      required: [users, total_count]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total_count:
          type: integer
        page:
          type: integer
        page_size:
          type: integer

    AuditLogEntry:
      type: object
      required: [id, timestamp, event_type, user_id, action, resource]
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        event_type:
          type: string
          enum: [auth, config, admin, data]
        user_id:
          type: string
        action:
          type: string
        resource:
          type: string
        ip_address:
          type: string
        user_agent:
          type: string
        metadata:
          type: object

    AuditLogsResponse:
      type: object
      required: [logs, total_count]
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
        total_count:
          type: integer

    # Error Response Schema
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message, type, timestamp]
          properties:
            code:
              type: string
              description: Machine-readable error code
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid request parameters"
            type:
              type: string
              description: Error type
              example: "ValidationError"
            timestamp:
              type: string
              format: date-time
              description: Error timestamp
            request_id:
              type: string
              description: Unique request identifier for tracking
            path:
              type: string
              description: API path where error occurred

    # Existing schemas from original spec
    HealthResponse:
      type: object
      required: [status, overall_status, timestamp, version, components, features]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        overall_status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        components:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ComponentStatus'
            redis:
              $ref: '#/components/schemas/ComponentStatus'
            vault:
              $ref: '#/components/schemas/ComponentStatus'
            weaviate:
              $ref: '#/components/schemas/ComponentStatus'
        features:
          type: object
          additionalProperties:
            type: string

    ComponentStatus:
      type: object
      required: [status, message]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy, unavailable]
        message:
          type: string

    SearchRequest:
      type: object
      required: [query]
      properties:
        query:
          type: string
          description: Search query text
          minLength: 1
          maxLength: 500
        technology_hint:
          type: string
          description: Optional technology filter
        limit:
          type: integer
          description: Maximum results to return
          minimum: 1
          maximum: 100
          default: 20
        session_id:
          type: string
          description: Session identifier for tracking

    SearchResponse:
      type: object
      required: [results, total_count, query, execution_time_ms, cache_hit]
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        total_count:
          type: integer
          description: Total matching documents
        query:
          type: string
          description: Original search query
        technology_hint:
          type: string
          description: Technology filter applied
        execution_time_ms:
          type: integer
          description: Query execution time
        cache_hit:
          type: boolean
          description: Whether results came from cache

    SearchResult:
      type: object
      required: [content_id, title, snippet, source_url, technology, relevance_score, content_type, workspace]
      properties:
        content_id:
          type: string
          description: Unique content identifier
        title:
          type: string
          description: Document title
        snippet:
          type: string
          description: Content preview snippet
        source_url:
          type: string
          description: Original source URL
        technology:
          type: string
          description: Technology category
        relevance_score:
          type: number
          description: Relevance score (0-1)
          minimum: 0
          maximum: 1
        content_type:
          type: string
          description: Type of content
          enum: [documentation, tutorial, api_reference, guide, example]
        workspace:
          type: string
          description: Workspace/collection name

# Security applied globally to all endpoints except health
security:
  - JWTAuth: []
  - ApiKeyAuth: []