"""
LLM Provider Integration Data Models - PRD-005
Pydantic models for structured LLM responses and validation

Implements exact data models specified in PRD-005 lines 265-296 with
model version tracking, field validation, and proper type annotations.
"""

import logging
from typing import List, Literal
from pydantic import BaseModel, Field
from datetime import datetime

logger = logging.getLogger(__name__)


class EvaluationResult(BaseModel):
    """
    Search result evaluation output from evaluation.prompt template.
    
    Used by SearchOrchestrator to determine if enrichment is needed
    based on LLM analysis of search result sufficiency and quality.
    """
    model_version: str = Field("1.0.0", description="Model version for compatibility")
    sufficiency_score: float = Field(..., ge=0.0, le=1.0, description="How well results address the query")
    confidence: float = Field(..., ge=0.0, le=1.0, description="LLM confidence in evaluation")
    missing_aspects: List[str] = Field(default=[], description="List of missing information areas")
    should_enrich: bool = Field(..., description="Whether enrichment is recommended")
    reasoning: str = Field(..., description="Detailed explanation of assessment")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Evaluation timestamp")


class RepositoryTarget(BaseModel):
    """
    Target repository specification for enrichment strategy.
    
    Specifies GitHub repositories to search for missing information
    with priority scoring for optimization.
    """
    model_version: str = Field("1.0.0", description="Model version for compatibility")
    owner: str = Field(..., description="Repository owner/organization")
    repo: str = Field(..., description="Repository name")
    path: str = Field(..., description="Specific path within repository")
    priority: float = Field(..., ge=0.0, le=1.0, description="Priority score for this target")


class EnrichmentStrategy(BaseModel):
    """
    Enrichment strategy plan generated by strategy.prompt template.
    
    Provides actionable enrichment plan with target repositories,
    search queries, and prioritized sources for knowledge acquisition.
    """
    model_version: str = Field("1.0.0", description="Model version for compatibility")
    target_repositories: List[RepositoryTarget] = Field(default=[], description="Repositories to search")
    search_queries: List[str] = Field(default=[], description="Specific search terms and phrases")
    priority_sources: List[Literal["github", "official_docs", "web"]] = Field(
        default=[], description="Ordered list of information source priorities"
    )
    estimated_value: float = Field(..., ge=0.0, le=1.0, description="Expected value of enrichment effort")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Strategy creation timestamp")


class QualityAssessment(BaseModel):
    """
    Content quality assessment from quality.prompt template.
    
    Evaluates content relevance and quality to determine if it should
    be stored in the knowledge base for future searches.
    """
    model_version: str = Field("1.0.0", description="Model version for compatibility")
    relevance_score: float = Field(..., ge=0.0, le=1.0, description="Content relevance to search context")
    quality_score: float = Field(..., ge=0.0, le=1.0, description="Overall content quality score")
    should_store: bool = Field(..., description="Whether content should be stored")
    content_type: Literal["tutorial", "reference", "guide", "example", "api", "other"] = Field(
        ..., description="Classified content type"
    )
    confidence: float = Field(..., ge=0.0, le=1.0, description="LLM confidence in assessment")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Assessment timestamp")