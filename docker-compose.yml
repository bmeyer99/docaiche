services:
  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    ports:
      - "4000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      anythingllm:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000
      "
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 5s
      timeout: 4s
      retries: 10
    volumes:
      - db_data:/data
    restart: unless-stopped

  admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_APP_NAME=DocAIche Admin
        - NEXT_PUBLIC_ENABLE_AUTH=false
    ports:
      - "4080:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_NAME=DocAIche Admin
      - NEXT_PUBLIC_ENABLE_AUTH=false
      - NEXT_PUBLIC_SENTRY_DISABLED=true
    depends_on:
      api:
        condition: service_healthy
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    networks:
      - docaiche
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 4s
      retries: 10
    restart: unless-stopped

  db:
    image: alpine:3.18
    command: ["sh", "-c", "mkdir -p /data && touch /data/docaiche.db && chmod 666 /data/docaiche.db && tail -f /dev/null"]
    volumes:
      - db_data:/data
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "test", "-f", "/data/docaiche.db"]
      interval: 5s
      timeout: 4s
      retries: 10
    restart: unless-stopped

  anythingllm:
    image: mintplexlabs/anythingllm:latest
    environment:
      STORAGE_DIR: /app/server/storage
    volumes:
      - anythingllm_data:/app/server/storage
      - anythingllm_exports:/app/server/exports
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 5s
      timeout: 4s
      retries: 10
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - docaiche
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - docaiche
    depends_on:
      - loki
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - docaiche
    depends_on:
      - loki
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  docaiche:

volumes:
  redis_data:
  db_data:
  anythingllm_data:
  anythingllm_exports:
  loki_data:
  grafana_data: