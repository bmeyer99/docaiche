services:
  traefik:
    image: traefik:v3.2
    ports:
      - "4080:80"
      - "8080:8080"  # Traefik dashboard (optional, for debugging)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/traefik.yml:ro
    networks:
      - docaiche
    labels:
      - "docaiche.service=traefik"
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    # Port not exposed - access through admin-ui proxy on port 4080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY:-docaiche-weaviate-key-2025}
      - DATABASE_URL=postgresql+asyncpg://docaiche:${POSTGRES_PASSWORD:-docaiche-secure-password-2025}@postgres:5432/docaiche
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=docaiche
      - POSTGRES_USER=docaiche
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-docaiche-secure-password-2025}
      - ENVIRONMENT=development
      - DATA_DIR=/data
      - LOG_LEVEL=INFO
      # AI Logging Configuration
      - AI_LOG_ENABLED=true
      - AI_LOG_CACHE_TTL=300
      - AI_LOG_MAX_CACHE_SIZE=1000
      - AI_LOG_PATTERN_DETECTION=true
      - AI_LOG_CORRELATION_TIMEOUT=30
      - AI_LOG_STREAM_BUFFER_SIZE=100
      - AI_LOG_EXPORT_BATCH_SIZE=1000
      - LOKI_URL=http://loki:3100
      - LOKI_TIMEOUT=30
      - LOKI_MAX_RETRIES=3
    command: >
      sh -c "
        mkdir -p /var/log/docaiche &&
        python -m src.database.init_db &&
        (python /app/init-weaviate-workspace.py > /var/log/docaiche/workspace-init.log 2>&1 &) &&
        uvicorn src.main:app --host 0.0.0.0 --port 4000
      "
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - logs_data:/var/log/docaiche
    restart: unless-stopped
    labels:
      - "docaiche.service=api"
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api/`) || PathPrefix(`/ws/`) || PathPrefix(`/mcp`)"
      - "traefik.http.routers.api.priority=105"
      - "traefik.http.services.api.loadbalancer.server.port=4000"
      - "traefik.http.middlewares.ws-rewrite.replacepathregex.regex=^/ws/(.*)"
      - "traefik.http.middlewares.ws-rewrite.replacepathregex.replacement=/api/v1/ws/$$1"
      - "traefik.http.routers.api.middlewares=ws-rewrite"

  admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_APP_NAME=DocAIche Admin
        - NEXT_PUBLIC_ENABLE_AUTH=false
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_NAME=DocAIche Admin
      - NEXT_PUBLIC_ENABLE_AUTH=false
      - NEXT_PUBLIC_SENTRY_DISABLED=true
      # AI Logging Access for UI
      - NEXT_PUBLIC_AI_LOGS_ENABLED=true
      - NEXT_PUBLIC_AI_LOGS_WEBSOCKET_ENABLED=true
      # API URL - uses relative path so it works through Traefik
      - NEXT_PUBLIC_API_URL=/api/v1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (res) => process.exit(res.statusCode >= 200 && res.statusCode < 400 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - logs_data:/var/log/docaiche
    restart: unless-stopped
    labels:
      - "docaiche.service=admin-ui"
      - "traefik.enable=true"
      - "traefik.http.routers.admin-ui.rule=PathPrefix(`/`)"
      - "traefik.http.routers.admin-ui.priority=1"
      - "traefik.http.services.admin-ui.loadbalancer.server.port=3000"

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    networks:
      - docaiche
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=redis"

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: docaiche
      POSTGRES_USER: docaiche
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-docaiche-secure-password-2025}
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MIN_WAL_SIZE: 1GB
      POSTGRES_MAX_WAL_SIZE: 4GB
    command: 
      - postgres
      - -c
      - shared_preload_libraries=pg_stat_statements
      - -c
      - pg_stat_statements.track=all
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - docaiche
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docaiche -d docaiche"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    labels:
      - "docaiche.service=postgresql"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  weaviate:
    image: semitechnologies/weaviate:latest
    # Ports not exposed - access through admin-ui proxy on port 4080
    environment:
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY:-docaiche-weaviate-key-2025}'
      AUTHENTICATION_APIKEY_USERS: 'docaiche-service'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      QUERY_DEFAULTS_LIMIT: 25
      ENABLE_MODULES: ''
      DEFAULT_VECTORIZER_MODULE: 'none'
      ASYNC_INDEXING: 'true'
      CLUSTER_HOSTNAME: 'node1'
      BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_PORT: '2112'
      PROMETHEUS_MONITORING_GROUP: 'true'
    volumes:
      - weaviate_data:/var/lib/weaviate
      - weaviate_backups:/var/lib/weaviate/backups
    networks:
      - docaiche
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=weaviate"

  loki:
    image: grafana/loki:3.5.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - docaiche
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=loki"
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=PathPrefix(`/loki`)"
      - "traefik.http.routers.loki.priority=95"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"
      - "traefik.http.middlewares.loki-stripprefix.stripprefix.prefixes=/loki"
      - "traefik.http.routers.loki.middlewares=loki-stripprefix"

  promtail:
    image: grafana/promtail:3.5.0
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - logs_data:/var/log/docaiche:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - docaiche
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "/bin/promtail", "-check-syntax", "-config.file=/etc/promtail/config.yml"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=promtail"

  grafana:
    image: grafana/grafana:12.0.2
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES=false
      - GF_SERVER_ROOT_URL=/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - docaiche
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    depends_on:
      - loki
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=grafana"
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.priority=98"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.grafana-headers.headers.customrequestheaders.X-Forwarded-Proto=http"
      - "traefik.http.middlewares.grafana-headers.headers.customrequestheaders.X-Forwarded-Host={{.Request.Host}}"
      - "traefik.http.routers.grafana.middlewares=grafana-headers"

  prometheus:
    image: prom/prometheus:v3.4.2
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-alerts.yml:/etc/prometheus/prometheus-alerts.yml
      - prometheus_data:/prometheus
    networks:
      - docaiche
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=prometheus"
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.priority=100"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.prometheus-stripprefix.stripprefix.prefixes=/prometheus"
      - "traefik.http.routers.prometheus.middlewares=prometheus-stripprefix"

  node-exporter:
    image: prom/node-exporter:v1.8.2
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - docaiche
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9100/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=node-exporter"

  redis-exporter:
    image: oliver006/redis_exporter:v1.66.0
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - docaiche
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "/redis_exporter", "--version"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    labels:
      - "docaiche.service=redis-exporter"

networks:
  docaiche:

volumes:
  redis_data:
  postgres_data:
  weaviate_data:
  weaviate_backups:
  loki_data:
  grafana_data:
  prometheus_data:
  logs_data: