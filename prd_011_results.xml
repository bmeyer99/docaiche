<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="38" time="1.491" timestamp="2025-06-24T03:59:24.741367+00:00" hostname="860ccdba2723"><testcase classname="tests.validation.test_prd_011_response_generation" name="test_generate_response_workflow_completeness" time="0.002"><failure message="TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'">tests/validation/test_prd_011_response_generation.py:35: in test_generate_response_workflow_completeness
    result = await gen.generate_response(
E   TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_generate_response_async_await_pattern" time="0.004"><failure message="TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'">tests/validation/test_prd_011_response_generation.py:64: in test_generate_response_async_await_pattern
    result = await gen.generate_response(
E   TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_template_engine_multi_format_rendering" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_template_engine_safe_rendering_and_injection_prevention" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_content_synthesizer_merge_deduplication_prioritization" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_response_builder_extensible_structured_assembly" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_response_formatter_multi_format_output" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_response_validator_schema_enforcement_and_error_handling" time="0.000"><failure message="AssertionError: assert not True&#10; +  where True = validate({'bad': 'data'})&#10; +    where validate = &lt;src.response.validator.ResponseValidator object at 0x71dddc87f430&gt;.validate">tests/validation/test_prd_011_response_generation.py:121: in test_response_validator_schema_enforcement_and_error_handling
    assert not validator.validate(invalid)
E   AssertionError: assert not True
E    +  where True = validate({'bad': 'data'})
E    +    where validate = &lt;src.response.validator.ResponseValidator object at 0x71dddc87f430&gt;.validate</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_integration_with_search_orchestrator_and_enricher" time="0.001"><failure message="TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'">tests/validation/test_prd_011_response_generation.py:136: in test_integration_with_search_orchestrator_and_enricher
    await gen.generate_response(
E   TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_integration_with_llm_provider" time="0.001"><failure message="TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'">tests/validation/test_prd_011_response_generation.py:154: in test_integration_with_llm_provider
    await gen.generate_response(
E   TypeError: ResponseGenerator.generate_response() missing 1 required positional argument: 'query'</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_template_engine_no_code_execution" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_formatter_output_sanitization" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_content_synthesizer_input_validation" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_response_generation_performance" time="1.045"><failure message="src.response.exceptions.ResponseGenerationError: Unexpected error in response generation: Content synthesis failed: enrichment_results must be a list if provided.">src/response/content_synthesizer.py:64: in synthesize
    raise ValueError("enrichment_results must be a list if provided.")
E   ValueError: enrichment_results must be a list if provided.

During handling of the above exception, another exception occurred:
src/response/generator.py:120: in generate_response
    synthesized_content = self.content_synthesizer.synthesize(
src/response/content_synthesizer.py:99: in synthesize
    raise ValueError(f"Content synthesis failed: {e}")
E   ValueError: Content synthesis failed: enrichment_results must be a list if provided.

During handling of the above exception, another exception occurred:
tests/validation/test_prd_011_response_generation.py:196: in test_response_generation_performance
    await benchmark(gen.generate_response, search_results, enrichment_results, output_format, context)
src/response/generator.py:176: in generate_response
    raise ResponseGenerationError(f"Unexpected error in response generation: {e}")
E   src.response.exceptions.ResponseGenerationError: Unexpected error in response generation: Content synthesis failed: enrichment_results must be a list if provided.</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation" name="test_template_engine_rendering_speed" time="0.291" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_generate_response_handles_template_failure" time="0.001" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_generate_response_handles_content_synthesis_failure" time="0.001" /><testcase classname="tests.validation.test_prd_011_response_generation" name="test_template_engine_handles_malformed_template" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_generator_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_template_engine_render_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_builder_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_formatter_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_validator_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_content_synthesizer_signature" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_generator_default_and_custom_constructor" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_template_engine_render_formats[json]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_template_engine_render_formats[html]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_template_engine_render_formats[markdown]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_builder_meta_parameter" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_formatter_valid_output[json-data0]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_formatter_valid_output[html-&lt;div&gt;foo&lt;/div&gt;]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_formatter_valid_output[markdown-# Title]" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_validator_valid_and_invalid" time="0.000"><failure message="ValueError: Response validation exception: Response validation failed: ['Data is None']">src/response/validator.py:77: in validate
    raise ValueError(f"Response validation failed: {errors}")
E   ValueError: Response validation failed: ['Data is None']

During handling of the above exception, another exception occurred:
tests/validation/test_prd_011_response_generation_validation.py:99: in test_response_validator_valid_and_invalid
    assert validator.validate(invalid) is False
src/response/validator.py:81: in validate
    raise ValueError(f"Response validation exception: {e}")
E   ValueError: Response validation exception: Response validation failed: ['Data is None']</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_content_synthesizer_input_validation_and_merge" time="0.000"><failure message="AssertionError: assert False&#10; +  where False = isinstance([{'text': 'A'}, {'text': 'B'}], dict)">tests/validation/test_prd_011_response_generation_validation.py:109: in test_content_synthesizer_input_validation_and_merge
    assert isinstance(result, dict)
E   AssertionError: assert False
E    +  where False = isinstance([{'text': 'A'}, {'text': 'B'}], dict)</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_generation_workflow" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_template_engine_injection_prevention" time="0.000" /><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_content_synthesizer_input_sanitization" time="0.000"><failure message="TypeError: list indices must be integers or slices, not str">tests/validation/test_prd_011_response_generation_validation.py:151: in test_content_synthesizer_input_sanitization
    assert "&lt;img" not in result["text"]
E   TypeError: list indices must be integers or slices, not str</failure></testcase><testcase classname="tests.validation.test_prd_011_response_generation_validation" name="test_response_generation_performance" time="0.000" /></testsuite></testsuites>