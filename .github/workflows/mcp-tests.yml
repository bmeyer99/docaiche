name: MCP Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/mcp/**'
      - 'tests/mcp/**'
      - '.github/workflows/mcp-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/mcp/**'
      - 'tests/mcp/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11]
        test-type: [unit, integration, security, system]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        python tests/mcp/run_tests.py --type ${{ matrix.test-type }} --verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: test_results/mcp/
    
  coverage:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests with coverage
      run: |
        python tests/mcp/run_tests.py --type all --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./test_results/mcp/coverage.json
        flags: mcp
        name: mcp-coverage
    
    - name: Generate coverage report
      run: |
        coverage html -d test_results/mcp/coverage_html
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: test_results/mcp/coverage_html/
    
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security scan
      uses: gaurav-nelson/bandit-action@v1
      with:
        path: "src/mcp"
    
    - name: Run Safety check
      run: |
        pip install safety
        safety check --json > security-report.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: security-report.json
    
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 mypy black isort
    
    - name: Run linting
      run: |
        python tests/mcp/run_tests.py --lint
    
    - name: Check code formatting
      run: |
        black --check src/mcp tests/mcp
        isort --check-only src/mcp tests/mcp